[pause_resume]

[display_status]


[gcode_macro START_PRINT]
gcode:
    G28 X
    T0
    {% set BED_TEMP = params.BED_TEMP|default(60) %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP %}
    {% set EXTRUDER1_TEMP = params.EXTRUDER1_TEMP %}
    
    Status_heating
    M83
    # Use absolute coordinates but realative extrusions
    G90
    G92 E0 ; reset extruder distance
    
    M117 Preheating bed...
    # Start bed heating and continue
    M140 S{BED_TEMP}
    {% if printer.heater_bed.temperature < params.BED_TEMP|float*0.7 %}
    M190 S{params.BED_TEMP|float*0.7} # wait till 70% of target bed temp is reached, then continue  
    {% endif %}
  
    M117 Heating...
    #Start heating hotend to 70% (no oozing)
    M104 T0 S{params.EXTRUDER_TEMP|float*0.8}
    M104 T1 S{params.EXTRUDER1_TEMP|float*0.8}
    
    M190 S{BED_TEMP}

    M117 Homing...
    Status_homing
    G28
    Status_leveling
    Z_TILT_ADJUST
    G1 X-65 Y0 Z0 F8000
    Status_heating
    M117 Heating Hotend
    M104 T0 S{EXTRUDER_TEMP}
    M104 T1 S{EXTRUDER1_TEMP}

    M109 T0 S{EXTRUDER_TEMP}
    M109 T1 S{EXTRUDER1_TEMP}
    # Reset the G-Code Z offset (adjust Z offset if needed)
    #SET_GCODE_OFFSET Z=0.0 MOVE=1
  
    # Use the bed mesh 
    #BED_MESH_PROFILE LOAD=default


    # Prime line
    PRIME_LINE
    

    M117 Printing...
    Status_printing

[gcode_macro PRIME_LINE]
gcode:
  {% if printer.extruder.temperature >= 180 %}
  T0
  G1 X90 Y0 Z0 F10000
  M117 Priming the nozzle
  G1 Z0.3 F240
  G1 Y{ (range(0, 8) | random) * 0.64} F1200 ; Set random start Y between 0 and ~5mm
  G1 E10 F300
  G1 X70 E3 F1200.0 ; pressure build up line
  G1 X5 Z0.4 E9 F1500.0 ; intro line
  G1 Z0.6 F3000 ; Move Z Axis up little 
  G1 X0 Z0.2 F3000.0 ; Move over and stick remainings to the bed
  G1 Z0.2 F240
  G92 E0 ; reset extruder distance
  {% endif %}

  {% if printer.extruder1.temperature >= 180 %}
  T1
  G1 X130 Y0 Z0 F10000
  M117 Priming the nozzle
  G1 Z0.3 F240
  G1 Y{ (range(0, 8) | random) * 0.64} F1200 ; Set random start Y between 0 and ~5mm
  G1 E10 F300
  G1 X150 E3 F1200.0 ; pressure build up line
  G1 X215 Z0.4 E9 F1500.0 ; intro line
  G1 Z0.6 F3000 ; Move Z Axis up little 
  G1 X220 Z0.2 F3000.0 ; Move over and stick remainings to the bed
  G1 Z0.2 F240
  G92 E0 ; reset extruder distance
  {% endif %}


[gcode_macro END_PRINT]
gcode:
    # Move nozzle away from print while retracting
    G91
    # Raise nozzle by 10mm
    G1 Z10 F600
    # Present print on cartesian printer, SB centered
    T0
    G90
    _PARK_extruder
    {% if printer.extruder.temperature >= 180 %}
    G91
    G1 E-10 F300
    {% endif %}
    T1
    G90
    _PARK_extruder1
    {% if printer.extruder1.temperature >= 180 %}
    G91
    G1 E-10 F300
    {% endif %}
    # Turn off bed, extruder, and fan
    M140 S0
    M104 T0 S0
    M104 T1 S0
    M106 S255
    # Disable steppers
    #M84
    G4 P10000
    M106 S0
    TIMELAPSE_TAKE_FRAME
    M117 Print finished
    Status_part_ready
    T0

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    TURN_OFF_HEATERS
    CLEAR_PAUSE
    SDCARD_RESET_FILE
    BASE_CANCEL_PRINT

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
# change this if you need more or less extrusion
variable_extrude: 0.5
gcode:
    ##### read E from pause macro #####
    {% set E = printer["gcode_macro PAUSE"].extrude|float %}
    ##### set park positon for x and y #####
    # default is your max posion from your printer.cfg
    {% set x_park = printer.toolhead.axis_maximum.x|float - 50.0 %}
    {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
    ##### calculate save lift position #####
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set act_z = printer.toolhead.position.z|float %}
    {% if act_z < (max_z - 20.0) %}
        {% set z_safe = 20.0 %}
    {% else %}
        {% set z_safe = max_z - act_z %}
    {% endif %}
    ##### end of definitions #####
    SAVE_GCODE_STATE NAME=PAUSE_state
    BASE_PAUSE
    G91
    G1 E-{E} F2100
    G1 Z{z_safe} F900
    G90
    G1 X{x_park} Y{y_park} F6000

[gcode_macro RESUME]
rename_existing: BASE_RESUME
gcode:
    ##### read E from pause macro #####
    {% set E = printer["gcode_macro PAUSE"].extrude|float + 1 %}
    ##### end of definitions #####
    G91
    G1 E{E} F2100
    RESTORE_GCODE_STATE NAME=PAUSE_state
    BASE_RESUME

[gcode_macro MAINTENANCE]
gcode:
    SAVE_GCODE_STATE NAME=PAUSE_state
    G1 X110 Y5 Z66.5 F600
    M84

# LOW_TEMP_CHECK checks if there is a setpoint for the extruder.
# - If this setpoint is reached, continue. 
# - If not, heat to setpoint.
# - If no setpoint, heat to parameter T (default@200)
[gcode_macro LOW_TEMP_CHECK]
gcode: 
    {% set T = params.T|default(215) %}

    {% if printer.extruder.target != 0 %} # if there is a setpoint for extruder
        {% if printer.extruder.temperature < printer.extruder.target %} # if not reached, heat
            M117 Heating from {printer.extruder.temperature} to {printer.extruder.target}.
            M109 S{printer.extruder.target|float} 
        {% endif %}
    {% else %} # if no setpoint for extruder
        {% if printer.extruder.target < T %}  # heat to T.
            M117 No setpoint, heating to {T}.
            M109 S{T}
        {% endif %}
    {% endif %}
    

# load filament alias
[gcode_macro M701]
gcode:
    FILAMENT_LOAD

# load filament
[gcode_macro FILAMENT_LOAD]
gcode:
    SAVE_GCODE_STATE NAME=loading_filament
    M117 Loading Filament
    G91 # set relative
    G92 E0.0
    LOW_TEMP_CHECK
    G1 E15 F120  # some extra to prime the nozzle --> slower 
    G1 E30 F1500  # length of bowden tube till cold-end (~420mm) 
    G1 E25 F120  # some extra to prime the nozzle --> slower 
    G92 E0.0
    RESTORE_GCODE_STATE NAME=loading_filament


# unload filament alias
[gcode_macro M702]
gcode:
    FILAMENT_UNLOAD

# unload filament
[gcode_macro FILAMENT_UNLOAD]
gcode:
    SAVE_GCODE_STATE NAME=unloading_filament
    M117 Unloading Filament 
    LOW_TEMP_CHECK
    M83                     # set extruder to relative extrusion
    G91                     # set toolhead to absolute position
    G1 Z10 F100000          
    G1 X0 F100000     # move up and to front/center to straighten filament path
    G1 E3   F300            # extrude slowly to soften tip of filament
    G1 E-30 F100000         # quickly yank filament back clear of hotend
    G1 E-50 F1800           # ensure filament is clear of extruder gears
    M82                     # set extruder to absolute extrusion
    RESTORE_GCODE_STATE NAME=unloading_filament

# filament change 
[gcode_macro M600]
gcode:
    M117 Filament Change
    SAVE_GCODE_STATE NAME=filament_change
    BASE_PAUSE
    LOW_TEMP_CHECK
    G91 # relative
    G1 E-1 F300 # retract 1
    #M125 # park
    PAUSE
    #FILAMENT_UNLOAD # unload

    M117 New filament
    #COUNTDOWN TIME=25 MSG="Switch"
    #FILAMENT_LOAD
    #COUNTDOWN TIME=10 MSG="Clean"
    #BASE_RESUME
    M117 Resuming
    RESTORE_GCODE_STATE NAME=filament_change
    M117 Printing..

[gcode_macro COUNTDOWN]
gcode: 
    {% set MSG = params.MSG|default(Time)|string %}
    {% set TIME = params.TIME|default(10) %}

    # countdown 
    {% for s in range(TIME|int, 0, -1) %}
        # dwell 1 second
        G4 P1000
        # echo
        M117 {params.MSG} {s}sec
    {% endfor %}


[respond]


[gcode_macro M106]
# Only rename_existing if you have a sacrificial [fan] section
rename_existing: M106.1
# The variable that controls fan speed swopping if not specifying P parameter
# -1 means the control is disabled, a value of 0-1 is the requested fan speed.
# Access via {printer["gcode_macro M106"].swap_speed}
variable_swap_speed: -1
gcode:
    {% set s = [[params.S|default(255)|int, 255]|min, 0]|max %}
    {% set p = params.P|default(-1)|int %}
    {% set speed = s / 255 %}

    # Set speed to -1 by default
    SET_GCODE_VARIABLE MACRO=M106 VARIABLE=swap_speed VALUE=-1

    {% if p == -1 %}
      # Set current active extruder fan
      {% if speed == 0 %}
        # Always turn off al fans if S0 is specified without a specific fan
        SET_FAN_SPEED FAN=fan_extruder SPEED=0
        SET_FAN_SPEED FAN=fan_extruder1 SPEED=0
      {% else %}
        # Opt into fan speed swop control
        SET_GCODE_VARIABLE MACRO=M106 VARIABLE=swap_speed VALUE={speed}
        SET_FAN_SPEED FAN=fan_{printer.toolhead.extruder} SPEED={speed}
      {% endif %}
    {% else %}
      # Set specified active extruder fan
      {% if p == 0 %}
        SET_FAN_SPEED FAN=fan_extruder SPEED={speed}
      {% else %}
        SET_FAN_SPEED FAN=fan_extruder1 SPEED={speed}
      {% endif %}
    {% endif %}

    # Update core Klipper's fan speed
    # Only do this if you have a sacrificial [fan] section
    M106.1 S{s}

[gcode_macro M107]
rename_existing: M107.1
gcode:
    {% set p = params.P|default(-1)|int %}
    M106 S0 P{p}

#######################################################################
# Helper script to park the carriage (called from T0 and T1 macros)
#######################################################################

# Macros to park the extruders and set them into a safe state
[gcode_macro _PARK_extruder]
gcode:
    {% if "x" in printer.toolhead.homed_axes %}
      SAVE_GCODE_STATE NAME=park0

      {% if printer["gcode_macro M106"].swap_speed != -1 %}
        SET_FAN_SPEED FAN=fan_extruder SPEED=0
      {% endif %}

      G90
      G1 X-65 F10000
      RESTORE_GCODE_STATE NAME=park0
    {% endif %}

[gcode_macro _PARK_extruder1]
gcode:
    {% if "x" in printer.toolhead.homed_axes %}
      SAVE_GCODE_STATE NAME=park1

      {% if printer["gcode_macro M106"].swap_speed != -1 %}
        SET_FAN_SPEED FAN=fan_extruder1 SPEED=0
      {% endif %}

      G90
      G1 X286 F10000
      RESTORE_GCODE_STATE NAME=park1
    {% endif %}

# Macros to change toolheads
[gcode_macro T0]
variable_offset_applied: 0
gcode:
    # Only do anything if the current tool is not T0
    {% if printer.toolhead.extruder != 'extruder' %}
      {% set svv = printer.save_variables.variables %}

      {% set fan_speed = printer["gcode_macro M106"].swap_speed %}
      {% if fan_speed != -1 %}
        SET_FAN_SPEED FAN=fan_extruder SPEED={fan_speed}
      {% else %}
        # Update core Klipper's fan speed to the fan speed of the active toolhead
        # Only do this if you have a sacrificial [fan] section
        M106.1 S{printer["fan_generic fan_extruder"].speed * 255}
      {% endif %}

      _PARK_{printer.toolhead.extruder}
      M400
      ACTIVATE_EXTRUDER EXTRUDER=extruder
      SET_DUAL_CARRIAGE CARRIAGE=0
      {% if printer["gcode_macro T0"].offset_applied == 1 %}
        SET_GCODE_OFFSET X_ADJUST={ -svv.xoffset } Y_ADJUST={ -svv.yoffset } Z_ADJUST={ -svv.zoffset } MOVE=1
        SET_GCODE_VARIABLE MACRO=T0 VARIABLE=offset_applied VALUE=0
      {% endif %}
      # SET_INPUT_SHAPER SHAPER_FREQ_X=60 SHAPER_TYPE_X=mzv
    {% endif %}

[gcode_macro T1]
gcode:
    # Only do anything if the current tool is not T1
    {% if printer.toolhead.extruder != 'extruder1' %}
      {% set svv = printer.save_variables.variables %}

      {% set fan_speed = printer["gcode_macro M106"].swap_speed %}
      {% if fan_speed != -1 %}
        SET_FAN_SPEED FAN=fan_extruder1 SPEED={fan_speed}
      {% else %}
        # Update core Klipper's fan speed to the fan speed of the active toolhead
        # Only do this if you have a sacrificial [fan] section
        M106.1 S{printer["fan_generic fan_extruder1"].speed * 255}
      {% endif %}

      _PARK_{printer.toolhead.extruder}
      M400
      ACTIVATE_EXTRUDER EXTRUDER=extruder1
      SET_DUAL_CARRIAGE CARRIAGE=1
      {% if printer["gcode_macro T0"].offset_applied == 0 %}
        SET_GCODE_OFFSET Z_ADJUST={ svv.zoffset } MOVE=1
        SET_GCODE_OFFSET X_ADJUST={ svv.xoffset } Y_ADJUST={ svv.yoffset }
        SET_GCODE_VARIABLE MACRO=T0 VARIABLE=offset_applied VALUE=1
      {% endif %}
      # SET_INPUT_SHAPER SHAPER_FREQ_X=60 SHAPER_TYPE_X=mzv
    {% endif %}


#######################################################################

#######################################################################
# Variables
#######################################################################
# These IDEX scripts depend on [save_variables] being defined.

[save_variables]
filename: ~/printer_data/config/variables.klip
# This is used for saving and restoring the idex offsets
# To create the IDEX variables execute:
#   SET_SEPARATION X=0 Y=0 Z=0

#######################################################################
# Tool alignment Calibration
#######################################################################

# YOU MUST CALIBRATE YOUR ROTATION_DISTANCE BEFORE THIS IS USEFUL!!!
# Configure this to draw 2 line segments perpendicular to the dual_carraige
# axis that meet in the middle of the bed. Both lines should have the same
# coordinate on the axis of the dual_carraige. If they don't print inline,
# adjust your endstop settings.
[gcode_macro SET_SEPARATION]
gcode:
    {% set svv = printer.save_variables.variables %}

    {% set oldX = svv.xoffset|default(0.0)|float %}
    {% set oldY = svv.yoffset|default(0.0)|float %}
    {% set oldZ = svv.zoffset|default(0.0)|float %}

    {% if params.X is defined %}
      SAVE_VARIABLE VARIABLE=xoffset VALUE={ params.X|float }
    {% endif %}

    {% if params.Y is defined %}
      SAVE_VARIABLE VARIABLE=yoffset VALUE={ params.Y|float }
    {% endif %}

    {% if params.Z is defined %}
      SAVE_VARIABLE VARIABLE=zoffset VALUE={ params.Z|float }
    {% endif %}

    {% if params.X_ADJUST is defined %}
      {% set newX = params.X_ADJUST|float + oldX %}
      SAVE_VARIABLE VARIABLE=xoffset VALUE={ newX }
    {% endif %}

    {% if params.Y_ADJUST is defined %}
      {% set newY = params.Y_ADJUST|float + oldY %}
      SAVE_VARIABLE VARIABLE=yoffset VALUE={ newY }
    {% endif %}

    {% if params.Z_ADJUST is defined %}
      {% set newZ = params.Z_ADJUST|float + oldZ %}
      SAVE_VARIABLE VARIABLE=zoffset VALUE={ newZ }
    {% endif %}

# Prints the separation to the console, will only work if you have the
# [respond] config section.
[gcode_macro GET_SEPARATION]
gcode:
    {% set svv = printer.save_variables.variables %}

    {% set svvX = svv.xoffset|default(0.0)|float %}
    {% set svvY = svv.yoffset|default(0.0)|float %}
    {% set svvZ = svv.zoffset|default(0.0)|float %}

    M118 xoffset: { svvX }  yoffset: { svvY }  zoffset: { svvZ }

[gcode_macro CALIBRATE_SEPARATION]
gcode:
    START_PRINT BED_TEMP=80 EXTRUDER_TEMP=220 EXTRUDER1_TEMP=220
    G90
    M83

    # X axis alignment
    T0 ; test T0
    G1 E5 F120
    G1 X120 Y130 F4800
    G1 Z.3 F1800
    G1 Y70 E10
    G1 Y130
    G1 Z30
    G1 E-2 F1800

    T1 ; test T1
    G1 E5 F120
    G1 X120 Y10 F4800
    G1 Z.3 F1800
    G1 Y70 E10
    G1 Y10
    G1 Z30
    G1 E-2 F1800

    # Y axis alignment
    T0 ; test T0
    G1 E5 F120
    G1 X10 Y150 Z.3 F4800
    G1 Z.3 F1800
    G1 X70 E10
    G1 X10
    G1 Z30
    G1 E-2 F1800

    T1 ; test T1
    G1 E5 F120
    G1 X130 Y150 F4800
    G1 Z.3 F1800
    G1 X70 E10
    G1 X130
    G1 Z30
    G1 E-2 F1800

    T0
    G28 X

