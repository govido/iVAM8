[include shell_command.cfg]
# This file contains common pin mappings for the BigTreeTech GTR.
# To use this config, the firmware should be compiled for the
# STM32F407 with a "32KiB bootloader".

# The "make flash" command does not work on the GTR. Instead,
# after running "make", copy the generated "klipper/out/klipper.bin" file to a
# file named "firmware.bin" on an SD card and then restart the GTR
# with that SD card.

# See docs/Config_Reference.md for a description of parameters.

[include T0-SB2040.cfg]

[include T1-SB2040.cfg]

[include mainsail.cfg]

[include custom_macros.cfg]

[include timelapse.cfg]

#[include lights.cfg]

[include T0-LEDs.cfg]

[include T1-LEDs.cfg]

[include telegram-shaper.conf]

[exclude_object]

[gcode_macro POWER_OFF_PRINTER]
gcode:
  {action_call_remote_method("set_device_power",
                             device="iVAM8",
                             state="off")}

[mcu]
serial: /dev/serial/by-id/usb-Klipper_stm32f407xx_1A003E0015504D5543363820-if00

[printer]
kinematics: cartesian
max_velocity: 300
max_accel: 1500
max_z_velocity: 8
max_z_accel: 7

[firmware_retraction]
retract_length: 0.3
#   The length of filament (in mm) to retract when G10 is activated,
#   and to unretract when G11 is activated (but see
#   unretract_extra_length below). The default is 0 mm.
retract_speed: 60
#   The speed of retraction, in mm/s. The default is 20 mm/s.
unretract_extra_length: 0
#   The length (in mm) of *additional* filament to add when
#   unretracting.
unretract_speed: 60
#   The speed of unretraction, in mm/s. The default is 10 mm/s.

[input_shaper]
shaper_freq_x: 23
shaper_type_x: mzv
shaper_freq_y: 42.2
shaper_type_y: ei

[mcu rpi]
serial: /tmp/klipper_host_mcu

[temperature_sensor pi]
sensor_type: temperature_host
min_temp: 10
max_temp: 100

[adxl345 bed]
cs_pin: rpi:None

[resonance_tester]
probe_points:
   #20,110,2
   110,110,2
   #200,110,2  
   #200,110,50
   110,110,50
   #20,110,50
   #20,110,100
   110,110,100
   #200,110,100 
#  A list of X,Y,Z coordinates of points (one point per line) to test
#   resonances at. At least one point is required. Make sure that all
#   points with some safety margin in XY plane (~a few centimeters)
#   are reachable by the toolhead.
accel_chip_x: adxl345 t0
accel_chip_y: adxl345 bed
#   Names of the accelerometer chips to use for measurements for each
#   of the axis. Can be useful, for instance, on bed slinger printer,
#   if two separate accelerometers are mounted on the bed (for Y axis)
#   and on the toolhead (for X axis). These parameters have the same
#   format as 'accel_chip' parameter. Only 'accel_chip' or these two
#   parameters must be provided.
#accel_chip: adxl345
#   A name of the accelerometer chip to use for measurements. If
#   adxl345 chip was defined without an explicit name, this parameter
#   can simply reference it as "accel_chip: adxl345", otherwise an
#   explicit name must be supplied as well, e.g. "accel_chip: adxl345
#   my_chip_name". Either this, or the next two parameters must be
#   set.
#max_smoothing:
#   Maximum input shaper smoothing to allow for each axis during shaper
#   auto-calibration (with 'SHAPER_CALIBRATE' command). By default no
#   maximum smoothing is specified. Refer to Measuring_Resonances guide
#   for more details on using this feature.
#min_freq: 5
#   Minimum frequency to test for resonances. The default is 5 Hz.
#max_freq: 120
#   Maximum frequency to test for resonances. The default is 120 Hz.
#accel_per_hz: 75
#   This parameter is used to determine which acceleration to use to
#   test a specific frequency: accel = accel_per_hz * freq. Higher the
#   value, the higher is the energy of the oscillations. Can be set to
#   a lower than the default value if the resonances get too strong on
#   the printer. However, lower values make measurements of
#   high-frequency resonances less precise. The default value is 75
#   (mm/sec).
#hz_per_sec: 1
#   Determines the speed of the test. When testing all frequencies in
#   range [min_freq, max_freq], each second the frequency increases by
#   hz_per_sec. Small values make the test slow, and the large values
#   will decrease the precision of the test. The default value is 1.0
#   (Hz/sec == sec^-2).

[force_move]
enable_force_move: True
#   Set to true to enable FORCE_MOVE and SET_KINEMATIC_POSITION
#   extended G-Code commands. The default is false.

# This file contains common pin mappings for the BigTreeTech SKR PRO.
# To use this config, the firmware should be compiled for the
# STM32F407 with a "32KiB bootloader".

# The "make flash" command does not work on the SKR PRO. Instead,
# after running "make", copy the generated "out/klipper.bin" file to a
# file named "firmware.bin" on an SD card and then restart the SKR PRO
# with that SD card.

# See docs/Config_Reference.md for a description of parameters.



[display_status]
[pause_resume]

#Motor 4 as X (M5 Board)
[tmc2209 stepper_x]
uart_pin: PC12
diag_pin: PD3
run_current: 0.600
stealthchop_threshold: 999999
driver_SGTHRS: 120
interpolate: false

[stepper_x]
step_pin: PD1
dir_pin: !PD0
enable_pin: !PD2
microsteps: 128
rotation_distance: 32
#endstop_pin: ^!PI7
position_min: -65.5
position_endstop: -65.5
position_max: 220
homing_speed: 50
endstop_pin: tmc2209_stepper_x:virtual_endstop
homing_retract_dist: 0

[tmc2209 stepper_y]
uart_pin: PE1
diag_pin: PC13
run_current: 0.600
stealthchop_threshold: 999999
driver_SGTHRS: 120
interpolate: false

[stepper_y]
step_pin: PE3
dir_pin: !PE2
enable_pin: !PE4
microsteps: 128
rotation_distance: 32
#endstop_pin: ^!PC13
position_endstop: -40
position_min: -40
position_max: 220
homing_speed: 50
endstop_pin: tmc2209_stepper_y:virtual_endstop
homing_retract_dist: 0

[stepper_z1]
step_pin: PG12
dir_pin: !PG11
enable_pin: !PG13
microsteps: 16
rotation_distance: 2
#endstop_pin: ^!PGI4

[tmc2209 stepper_z1]
uart_pin: PG10
run_current: 0.400
#hold_current: 0.100
stealthchop_threshold: 400
interpolate: false

[stepper_z]
step_pin: PD6
dir_pin: !PD5
enable_pin: !PD7
microsteps: 16
rotation_distance: 2
endstop_pin: probe:z_virtual_endstop
position_min: -2
position_max: 280
homing_speed: 9

[tmc2209 stepper_z]
uart_pin: PD4
run_current: 0.400
#hold_current: 0.100
stealthchop_threshold: 400
interpolate: false

[z_tilt]
z_positions:
  -50,110
  270,110
points:
  30,110
  190,110
speed: 160
retries: 9
retry_tolerance: 0.01

[verify_heater extruder]
#max_error: 240
#   The maximum "cumulative temperature error" before raising an
#   error. Smaller values result in stricter checking and larger
#   values allow for more time before an error is reported.
#   Specifically, the temperature is inspected once a second and if it
#   is close to the target temperature then an internal "error
#   counter" is reset; otherwise, if the temperature is below the
#   target range then the counter is increased by the amount the
#   reported temperature differs from that range. Should the counter
#   exceed this "max_error" then an error is raised. The default is
#   120.
#check_gain_time: 40
#   This controls heater verification during initial heating. Smaller
#   values result in stricter checking and larger values allow for
#   more time before an error is reported. Specifically, during
#   initial heating, as long as the heater increases in temperature
#   within this time frame (specified in seconds) then the internal
#   "error counter" is reset. The default is 20 seconds for extruders
#   and 60 seconds for heater_bed.
#hysteresis: 5
#   The maximum temperature difference (in Celsius) to a target
#   temperature that is considered in range of the target. This
#   controls the max_error range check. It is rare to customize this
#   value. The default is 5.
#heating_gain: 2
#   The minimum temperature (in Celsius) that the heater must increase
#   by during the check_gain_time check. It is rare to customize this
#   value. The default is 2.

[verify_heater extruder1]



#[filament_switch_sensor runout_e0]
#pause_on_runout: false
#   When set to True, a PAUSE will execute immediately after a runout
#   is detected. Note that if pause_on_runout is False and the
#   runout_gcode is omitted then runout detection is disabled. Default
#   is True.
#runout_gcode:
#   A list of G-Code commands to execute after a filament runout is
#   detected. See docs/Command_Templates.md for G-Code format. If
#   pause_on_runout is set to True this G-Code will run after the
#   PAUSE is complete. The default is not to run any G-Code commands.
#insert_gcode:
#   A list of G-Code commands to execute after a filament insert is
#   detected. See docs/Command_Templates.md for G-Code format. The
#   default is not to run any G-Code commands, which disables insert
#   detection.
#event_delay: 3.0
#   The minimum amount of time in seconds to delay between events.
#   Events triggered during this time period will be silently
#   ignored. The default is 3 seconds.
#pause_delay: 0.5
#   The amount of time to delay, in seconds, between the pause command
#   dispatch and execution of the runout_gcode. It may be useful to
#   increase this delay if OctoPrint exhibits strange pause behavior.
#   Default is 0.5 seconds.
#switch_pin: PF7
#   The pin on which the switch is connected. This parameter must be
#   provided.

#heater_pin: PD14 # Heat1
#sensor_pin: PF5 # T2
#...

[dual_carriage]
axis: x
step_pin: PC15
dir_pin: PF0
enable_pin: !PF1
microsteps: 128
rotation_distance: 32
#endstop_pin: ^!PF2
position_endstop: 286.5
position_max: 286.5
homing_speed: 50
endstop_pin: tmc2209_dual_carriage:virtual_endstop
homing_retract_dist: 0

[tmc2209 dual_carriage]
uart_pin: PC14
diag_pin: PF2
run_current: 0.600
stealthchop_threshold: 999999
driver_SGTHRS: 120
interpolate: false


#heater_pin: PB0 # Heat2
#sensor_pin: PF6 # T3
#...

[heater_bed]
heater_pin: PA2
sensor_pin: PC0 # Bed
sensor_type: ATC Semitec 104GT-2
max_power: 0.6
min_temp: 0
max_temp: 120


[safe_z_home]
home_xy_position: 110,110 # Change coordinates to the center of your print bed
speed: 40
z_hop: 10                 # Move up 10mm
z_hop_speed: 5

[gcode_arcs]
#resolution: 1.0
#   An arc will be split into segments. Each segment's length will
#   equal the resolution in mm set above. Lower values will produce a
#   finer arc, but also more work for your machine. Arcs smaller than
#   the configured value will become straight lines. The default is
#   1mm.



[bed_mesh]
speed: 160
horizontal_move_z: 5
mesh_min: 20,20
mesh_max: 200, 200
probe_count: 3,3


########################################
# EXP1 / EXP2 (display) pins
########################################

[board_pins]
aliases:
    # EXP1 header
    EXP1_1=PC11, EXP1_3=PC10, EXP1_5=PG8, EXP1_7=PG6, EXP1_9=<GND>,
    EXP1_2=PA15, EXP1_4=PA8, EXP1_6=PG7, EXP1_8=PG5, EXP1_10=<5V>,
    # EXP2 header
    EXP2_1=PB14, EXP2_3=PD10, EXP2_5=PH10, EXP2_7=PB10,  EXP2_9=<GND>,
    EXP2_2=PB13, EXP2_4=PB12, EXP2_6=PB15, EXP2_8=<RST>, EXP2_10=<NC>
    # not sure on this: Pins EXP2_1, EXP2_6, EXP2_2 are also MISO, MOSI, SCK of bus "spi2"

# See the sample-lcd.cfg file for definitions of common LCD displays.

######################################################################
# "RepRapDiscount 128x64 Full Graphic Smart Controller" type displays
######################################################################

# [bed_mesh default]
# version = 1
# points =
# 	-0.010000, 0.008750, -0.033750
# 	-0.086875, -0.005000, -0.074375
# 	-0.026875, 0.085000, -0.002500
# tension = 0.2
# min_x = 20.0
# algo = lagrange
# y_count = 3
# mesh_y_pps = 2
# min_y = 20.0
# x_count = 3
# max_y = 200.0
# mesh_x_pps = 2
# max_x = 200.0

[display]
lcd_type: uc1701
cs_pin: EXP1_3
a0_pin: EXP1_4
rst_pin: EXP1_5
contrast: 63
encoder_pins: ^EXP2_3, ^EXP2_5
click_pin: ^!EXP1_2
#kill_pin: ^!EXP2_8
menu_reverse_navigation: true
display_group: _multiextruder_16x4



#[output_pin light]
#pin: PE6
#pwm: true
#value: 0.5
#cycle_time: 0.010

#*# <---------------------- SAVE_CONFIG ---------------------->
#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.
#*#
#*# [heater_bed]
#*# control = pid
#*# pid_kp = 40.780
#*# pid_ki = 0.971
#*# pid_kd = 428.188
#*#
#*# [bltouch]
#*# z_offset = 0.680
#*#
#*# [extruder]
