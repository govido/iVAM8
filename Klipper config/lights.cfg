[neopixel mks_display]
pin: EXP1_6
chain_count: 3
color_order: RGB
initial_RED: 0.5
initial_GREEN: 0.7
initial_BLUE: 0.5

[led_effect printhead0_idle]
autostart:              true
frame_rate:             24
leds:
    neopixel:sb_leds (1-3)
layers:
    breathing  10 1 top  (0.0,0.6,0.0),(0.6,0.0,0.0)

[led_effect knob_idle]
autostart:              true
frame_rate:             24
leds:
    neopixel:mks_display (2-3)
layers:
    breathing  10 1 top  (0.0,0.5,0.0),(0.5,0.0,0.0)

[led_effect heat_bed]
autostart:              false
frame_rate:             24
leds:
    neopixel:sb_leds (1)
heater: heater_bed
layers:
    heater  50 0 add  (1.0,1.0,0.0),(1,0,0)
    static   0 0 top  (1,0,0)

[led_effect heat_nozzle]
autostart:              false
frame_rate:             24
leds:
    neopixel:sb_leds (2,3)
heater: extruder
layers:
    heater  50 0 add  (1.0,1.0,0.0),(1,0,0)
    static   0 0 top  (1,0,0)


# Set LCD RGB at startup
[delayed_gcode RESETRGB_ONSTARTUP]
initial_duration: 0.5
gcode:
    # The long delay it to ensure that moonraker has time to register the set_wled remote command
    RESETRGB

##  Set RGB values on boot up for each Neopixel. 
##  Index 1 = display, Index 2 and 3 = Knob (not correct for my voronpi 2.4)
##  Index 3 = display, Index 1 and 2 = Knob

[gcode_macro RESETRGB]
description: Default RGB for display and printer lights
gcode:
    SET_LED LED=mks_display RED=0.6 GREEN=0.5 BLUE=0.5 INDEX=1 TRANSMIT=0
    SET_LED LED=mks_display RED=0.25 GREEN=0.2 BLUE=0.15 INDEX=2 TRANSMIT=0
    SET_LED LED=mks_display RED=0.25 GREEN=0.2 BLUE=0.15 INDEX=3
    _LIGHTS_FLICKER

[gcode_macro LCDRGB]
description: Example LCDRGB R=1 G=0 B=0, controls the display
gcode:
    {% set R = params.R|default(1)|float %}
    {% set G = params.G|default(1)|float %}
    {% set B = params.B|default(1)|float %}

    SET_LED LED=mks_display RED={R} GREEN={G} BLUE={B} INDEX=1 TRANSMIT=0
    SET_LED LED=mks_display RED={R} GREEN={G} BLUE={B} INDEX=2 TRANSMIT=0
    SET_LED LED=mks_display RED={R} GREEN={G} BLUE={B} INDEX=3 TRANSMIT=1


# TimBot99 neat "turn-on" macro
[gcode_macro _LIGHTS_FLICKER]
gcode:
    {% set LEDTimes = [10, 20, 20, 240, 20, 40, 20, 100, 20, 20, 20, 260, 80, 20, 240, 60, 160, 20, 240, 20, 1000, 20, 20, 40, 100, 20, 274, 340, 860, 20, 1400, 20, 60, 20] %}
    {% set LED_Strip = "lights" %}
    # Target colour is a warm white
    {% set R = 255/255 %}
    {% set G = 191/255 %}
    {% set B = 130/255 %}

    {% for toggletime in LEDTimes %}
      {% set ledTime = toggletime|string %}
      {% set loopCount = loop.index %}

      {% if loopCount is divisibleby 2 %} # If the loop index is divisible by 2 (first index is NOT so the LEd should turn ON)
        SET_WLED STRIP=effects RED={R} GREEN={G} BLUE={B} TRANSMIT=1
        G4 P{ledTime|int}
      {% else %}
        SET_WLED STRIP=effects RED=0 GREEN=0 BLUE=0 TRANSMIT=1
        G4 P{ledTime|int}
      {% endif %}

    {% endfor %}


####################################################################
#          Low level WLED macros via moonraker
####################################################################

[gcode_macro WLED_ON]
description: Turn WLED strip on using optional preset
gcode:
  {% set strip = params.STRIP|string %}
  {% set preset = params.PRESET|default(-1)|int %}

  {action_call_remote_method("set_wled_state",
                             strip=strip,
                             state=True,
                             preset=preset)}

[gcode_macro WLED_OFF]
description: Turn WLED strip off
gcode:
  {% set strip = params.STRIP|string %}

  {action_call_remote_method("set_wled_state",
                             strip=strip,
                             state=False)}

[gcode_macro SET_WLED]
description: SET_LED like functionlity for WLED
gcode:
    {% set strip = params.STRIP|string %}
    {% set red = params.RED|default(0)|float %}
    {% set green = params.GREEN|default(0)|float %}
    {% set blue = params.BLUE|default(0)|float %}
    {% set white = params.WHITE|default(0)|float %}
    {% set index = params.INDEX|default(-1)|int %}
    {% set transmit = params.TRANSMIT|default(1)|int %}

    {action_call_remote_method("set_wled",
                               strip=strip,
                               red=red, green=green, blue=blue, white=white,
                               index=index, transmit=transmit)}